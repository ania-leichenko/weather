{"version":3,"sources":["store/citiesSlice.ts","components/CityCard/CityCardLayout.tsx","components/CityCard/CityCard.tsx","entities/cities.ts","components/MainCompnent/MainComponent.tsx","components/FullInformation/FullInformationLayout.tsx","components/FullInformation/FullInformation.tsx","store/store.ts","index.tsx"],"names":["_regeneratorRuntime","exports","Op","Object","prototype","hasOwn","hasOwnProperty","defineProperty","obj","key","desc","value","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","enumerable","configurable","writable","err","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","makeInvokeMethod","tryCatch","fn","arg","type","call","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","this","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","method","_invoke","AsyncIterator","PromiseImpl","previousPromise","callInvokeWithMethodAndArg","resolve","reject","invoke","record","result","__await","then","unwrapped","error","state","Error","doneResult","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","done","methodName","undefined","return","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","length","i","displayName","isGeneratorFunction","genFun","ctor","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","keys","val","object","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","fetchCityByName","createAsyncThunk","_ref","asyncToGenerator","_callee","city","_context","fetch","concat","response","json","_x","apply","arguments","citiesSlice","createSlice","initialState","cities","citiesInformation","reducers","setCity","action","payload","extraReducers","builder","addCase","fulfilled","actions","CityCardLayout","weatherDescription","minTemparature","maxTemparature","weatherIconId","cityInformation","children","weather","Math","floor","main","temp_min","temp_max","icon","date","Date","react_default","a","createElement","Card","className","CardContent","sx","width","Typography","variant","component","data-testid","toLocaleDateString","weekday","month","day","src","alt","CardActions","CityCard","dispatch","useDispatch","useSelector","getCityInformation","useEffect","Fragment","dist","to","Button","size","href","onClick","e","preventDefault","LOCALSTORAGE_CITIES_KEY","MenuProps","PaperProps","style","maxHeight","ITEM_HEIGHT","MainComponent","selectedCities","React","str","localStorage","getItem","split","react","Grid","container","direction","textAlign","justifyContent","FormControl","m","margin","InputLabel","id","Select","labelId","multiple","onChange","event","target","list","setItem","input","OutlinedInput","label","renderValue","selected","join","map","MenuItem","Checkbox","checked","indexOf","ListItemText","primary","spacing","item","xs","FullInformationLayout","humidity","wind","speed","description","Paper","p","alignItems","FullWeatherInformation","params","useParams","store","configureStore","reducer","citiesReducer","App","alert","useRoutes","path","element","MainCompnent_MainComponent","ReactDOM","createRoot","document","getElementById","render","StrictMode","es","basename","src_App"],"mappings":"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","file":"static/js/main.0b1a9802.chunk.js","sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport type { PayloadAction } from \"@reduxjs/toolkit\";\n\nexport const fetchCityByName = createAsyncThunk(\n  'cities/fetchCityByNameStatus',\n  async (city: string) => {\n    return fetch(\n      `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=f847b24e7d8adac7b410a9f557f6a6b3`\n    )\n      .then((response) => response.json());\n  }\n)\n\ntype Weather = {\n  main: string;\n  icon: string;\n  description: string\n};\n\nexport type CityInformation = {\n  humidity: string;\n  temp_max: number;\n  temp_min: number;\n  name: string;\n  weather: Array<Weather>;\n  main: { temp_min: number; temp_max: number, humidity: string };\n  wind: {speed: number};\n};\nexport interface CitiesState {\n  cities: Array<string>;\n  citiesInformation: {\n    [key: string]: CityInformation;\n  } \n};\n\nconst initialState: CitiesState = {\n  cities: [],\n  citiesInformation: {},\n};\n\nexport const citiesSlice = createSlice({\n  name: \"citiesSlice\",\n  initialState,\n  reducers: {\n    setCity: (state, action: PayloadAction<Array<string>>) => {\n      state.cities = action.payload;\n    },\n  },\n   extraReducers(builder) {\n    builder\n      .addCase(fetchCityByName.fulfilled, (state, action) => {\n        state.citiesInformation[action.payload.name] = action.payload; \n      });\n  },\n});\n\nexport const { setCity } = citiesSlice.actions;\n\nexport default citiesSlice.reducer;\n","import React, { Children, ReactNode, useEffect } from \"react\";\nimport Card from \"@mui/material/Card\";\nimport CardActions from \"@mui/material/CardActions\";\nimport CardContent from \"@mui/material/CardContent\";\nimport Typography from \"@mui/material/Typography\";\nimport { CityInformation } from \"../../store/citiesSlice\";\n\ntype Props = {\n  cityInformation: CityInformation;\n  children?: ReactNode;\n};\n\nexport default function CityCardLayout({ cityInformation, children }: Props) {\n  let weatherDescription;\n  let minTemparature;\n  let maxTemparature;\n  let weatherIconId;\n\n  if (cityInformation.weather) {\n    minTemparature = Math.floor(cityInformation.main.temp_min - 273);\n    maxTemparature = Math.floor(cityInformation.main.temp_max - 273);\n    cityInformation.weather.forEach((weather) => {\n      weatherDescription = weather.main;\n      weatherIconId = weather.icon;\n    });\n  }\n\n  const date = new Date();\n  const options: Intl.DateTimeFormatOptions = {\n    weekday: \"long\",\n    month: \"long\",\n    day: \"numeric\",\n  };\n\n  return (\n    <Card className=\"card\">\n      <CardContent sx={{ width: 300 }}>\n        <Typography variant=\"h5\" component=\"div\" data-testid=\"city-name\">\n          {cityInformation.name}\n        </Typography>\n        <Typography variant=\"body2\">\n          <br />\n          {date.toLocaleDateString(\"ua-UA\", options)}\n        </Typography>\n        <Typography variant=\"body2\" data-testid=\"city-temparature\">\n          <br />\n          {maxTemparature} / {minTemparature} ºC\n          <br />\n        </Typography>\n        <img\n          data-testid=\"city-img\"\n          src={`http://openweathermap.org/img/w/${weatherIconId}.png`}\n          alt=\"Weather Icon\"\n        ></img>\n        <Typography\n          variant=\"body2\"\n          className=\"weather-title\"\n          data-testid=\"weather-title\"\n        >\n          {weatherDescription}\n        </Typography>\n      </CardContent>\n      {children && (\n        <CardActions data-testid=\"card-action\">{children}</CardActions>\n      )}\n    </Card>\n  );\n}\n","import React, { useEffect }from \"react\";\nimport Button from \"@mui/material/Button\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport type { RootState, AppDispatch } from \"../../store/store\";\nimport { fetchCityByName } from \"../../store/citiesSlice\";\nimport CityCardLayout from \"./CityCardLayout\";\nimport { Link } from \"react-router-dom\";\n\ntype Props = {\n  city: string;\n};\n\nexport default function CityCard({ city }: Props) {\n  const dispatch = useDispatch<AppDispatch>();\n  const citiesInformation = useSelector(\n    (state: RootState) => state.citiesSlice.citiesInformation\n  );\n\n  const cityInformation = citiesInformation[city];\n\n  function getCityInformation() {\n    dispatch(fetchCityByName(city));\n  }\n  useEffect(() => {\n    getCityInformation();\n  }, []);\n\n  function updateBtn(e: { preventDefault: () => void; }) {\n    e.preventDefault();\n    getCityInformation();\n  }\n\n  if (!cityInformation) {\n    return null;\n  }\n\n  return (\n    <CityCardLayout cityInformation={cityInformation}>\n      <>\n        <Link to={`/full-information/${cityInformation.name}`}>1</Link>\n        <Button size=\"small\" href={`/full-information/${cityInformation.name}`} >Learn more</Button>\n        <Button size=\"small\" onClick={updateBtn}>\n          Update\n        </Button>\n      </>\n    </CityCardLayout>\n  );\n}\n","export const cities = [\n  \"Kyiv\",\n  \"Kharkiv\",\n  \"Odesa\",\n  \"Dnipro\",\n  \"Donetsk\",\n  \"Lviv\",\n  \"Mykolaiv\",\n  \"Sevastopol\",\n  \"Mariupol\",\n  \"Luhansk\",\n  \"Chernihiv\",\n  \"Kherson\",\n  \"Poltava\",\n  \"Cherkasy\",\n  \"Zhytomyr\",\n  \"Sumy\",\n  \"Rivne\",\n  \"Ivano-Frankivsk\",\n  \"Ternopil\",\n  \"Kremenchuk\",\n  \"Lutsk\",\n  \"Brovary\",\n  \"Berdiansk\",\n];\n","import type { RootState } from \"../../store/store\";\nimport BasicCard from \"../CityCard/CityCard\";\nimport { cities } from \"../../entities/cities\";\nimport * as React from \"react\";\nimport OutlinedInput from \"@mui/material/OutlinedInput\";\nimport InputLabel from \"@mui/material/InputLabel\";\nimport MenuItem from \"@mui/material/MenuItem\";\nimport FormControl from \"@mui/material/FormControl\";\nimport ListItemText from \"@mui/material/ListItemText\";\nimport Select from \"@mui/material/Select\";\nimport Checkbox from \"@mui/material/Checkbox\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { setCity } from \"../../store/citiesSlice\";\nimport Grid  from \"@mui/material/Grid\";\n\nconst LOCALSTORAGE_CITIES_KEY = \"cities\";\nconst ITEM_HEIGHT = 48;\nconst ITEM_PADDING_TOP = 8;\nconst MenuProps = {\n  PaperProps: {\n    style: {\n      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n      width: 250,\n    },\n  },\n};\n\nfunction MainComponent() {\n  const selectedCities = useSelector((state: RootState) => state.citiesSlice.cities);\n  const dispatch = useDispatch();\n\n  React.useEffect(() => {\n    const str = localStorage.getItem(LOCALSTORAGE_CITIES_KEY);\n    if (str) {\n      dispatch(setCity(str.split(\",\")));\n    }\n  }, [dispatch]);\n\n  const handleChange = (event: { target: { value: any } }) => {\n    const {\n      target: { value },\n    } = event;\n\n    const list = typeof value === \"string\" ? value.split(\",\") : value;\n    dispatch(setCity(list));\n    localStorage.setItem(LOCALSTORAGE_CITIES_KEY, list);\n  };\n\n  return (\n    <Grid container direction=\"column\" textAlign=\"center\">\n      <h1>Choose City:</h1>\n      <Grid container direction=\"column\" justifyContent=\"center\">\n        <FormControl sx={{ m: 1, margin: 2 }}>\n          <InputLabel id=\"demo-multiple-checkbox-label\">Cities</InputLabel>\n          <Select\n            labelId=\"demo-multiple-checkbox-label\"\n            id=\"demo-multiple-checkbox\"\n            multiple\n            value={selectedCities}\n            onChange={handleChange}\n            input={<OutlinedInput label=\"Cities\" />}\n            renderValue={(selected) => selected.join(\", \")}\n            MenuProps={MenuProps}\n          >\n            {cities.map((city) => (\n              <MenuItem key={city} value={city}>\n                <Checkbox checked={selectedCities.indexOf(city) > -1} />\n                <ListItemText primary={city} />\n              </MenuItem>\n            ))}\n          </Select>\n        </FormControl>\n      </Grid>\n      <Grid container textAlign=\"center\" spacing={2}>\n        <Grid item xs={12}>\n          <Grid container justifyContent=\"center\" spacing={2}>\n            {selectedCities.map((city) => (\n              <Grid key={city} item>\n                <BasicCard city={city}></BasicCard>\n              </Grid>\n            ))}\n          </Grid>\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n}\n\nexport default MainComponent;\n","import React from \"react\";\nimport Grid from \"@mui/material/Grid\";\nimport Paper from \"@mui/material/Paper\";\nimport Typography from \"@mui/material/Typography\";\nimport { CityInformation } from \"../../store/citiesSlice\";\n\ntype Props = {\n  cityInformation: CityInformation;\n};\n\nexport default function FullInformationLayout({ cityInformation }: Props) {\n  let weatherDescription;\n  let minTemparature;\n  let maxTemparature;\n  let weatherIconId;\n  let humidity;\n  let wind;\n\n  if (cityInformation.weather) {\n    minTemparature = Math.floor(cityInformation.main.temp_min - 273);\n    maxTemparature = Math.floor(cityInformation.main.temp_max - 273);\n    humidity = cityInformation.main.humidity;\n    wind = cityInformation.wind.speed;\n    cityInformation.weather.forEach((weather) => {\n      weatherDescription = weather.description;\n      weatherIconId = weather.icon;\n    });\n  }\n\n  const options: Intl.DateTimeFormatOptions = {\n    weekday: \"long\",\n    month: \"long\",\n    day: \"numeric\",\n  };\n\n  return (\n    <Grid container>\n      <Grid item xs={12}>\n        <Paper className=\"paper\" sx={{ p: 2 }}>\n          <Typography variant=\"h5\" component=\"div\" data-testid=\"city-name\">\n            {cityInformation.name}\n          </Typography>\n          <Typography variant=\"body2\">\n            <br />\n            {new Date().toLocaleDateString(\"ua-UA\", options)}\n          </Typography>\n          <Typography variant=\"body2\" data-testid=\"city-temparature\">\n            <br />\n            The high will be {maxTemparature}ºC, the low will be{\" \"}\n            {minTemparature}ºC.\n            <br />\n          </Typography>\n          <Grid container alignItems=\"center\">\n            <img\n              data-testid=\"city-img\"\n              src={`http://openweathermap.org/img/w/${weatherIconId}.png`}\n              alt=\"Weather Icon\"\n            ></img>\n            <Typography\n              variant=\"body2\"\n              className=\"weather-title\"\n              data-testid=\"weather-title\"\n            >\n              {weatherDescription}\n            </Typography>\n          </Grid>\n          <Typography\n            variant=\"body2\"\n            className=\"humidity\"\n            data-testid=\"humidity\"\n          >\n            Humidity: {humidity}%\n          </Typography>\n          <Typography variant=\"body2\" className=\"wind\" data-testid=\"wind\">\n            Wind speed: {wind}\n          </Typography>\n        </Paper>\n      </Grid>\n    </Grid>\n  );\n}\n","import React, { useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { AppDispatch, RootState } from \"../../store/store\";\nimport { fetchCityByName } from \"../../store/citiesSlice\";\nimport FullWeatherInformationLayout from \"./FullInformationLayout\";\n\nexport default function FullWeatherInformation() {\n  const dispatch = useDispatch<AppDispatch>();\n  const params = useParams();\n\n  const citiesInformation = useSelector(\n    (state: RootState) => state.citiesSlice.citiesInformation\n  );\n  useEffect(() => {\n    if (!params.id) {\n      return;\n    }\n    dispatch(fetchCityByName(params.id));\n  }, []);\n  if (!params.id) {\n    return null;\n  }\n  const cityInformation = citiesInformation[params.id];\n  if (!cityInformation) {\n    return null;\n  }\n\n  return <FullWeatherInformationLayout cityInformation={cityInformation} />;\n}\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport citiesReducer from \"./citiesSlice\";\n\nexport const store = configureStore({\n  reducer: {\n    citiesSlice: citiesReducer,\n  },\n});\n\nexport type RootState = ReturnType<typeof store.getState>\nexport type AppDispatch = typeof store.dispatch","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport MainCompnent from \"./components/MainCompnent/MainComponent\";\nimport { BrowserRouter as Router, useRoutes } from \"react-router-dom\";\nimport FullWeatherInformation from \"./components/FullInformation/FullInformation\";\nimport { store } from \"./store/store\";\nimport { Provider } from \"react-redux\";\n\nconst App = () => {\n  alert(2)\n  let routes = useRoutes([\n    { path: \"/\", element: <MainCompnent /> },\n    {\n      path: `full-information/:id`,\n      element: <FullWeatherInformation />,\n    },\n  ]);\n  return routes;\n};\n\nconst root = ReactDOM.createRoot(\n  document.getElementById(\"root\") as HTMLElement\n);\nroot.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <Router basename=\"/weather\">\n        <App />\n      </Router>\n    </Provider>\n  </React.StrictMode>\n);\n"],"sourceRoot":""}